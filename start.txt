电脑开发环境设置

1. 系统设置

1.1 升级WINDOWS 10（可选）
我们推荐你使用WINDOWS 10作为WINDOWS操作系统。因为WINDOWS 10作为免费系统使用不存在版权问题。
升级WINDOWS 10，只需要百度WINDOWS 10，安装升级程序即可。
建议卸载电脑上不必要的程序，如PPTV，百度输入法等。
如需安装OFFICE 2010，请向公司索取2010安装程序。

1.2 安装Ubuntu 14.04
1.2.1 在WINDOWS系统下，进入控制面板->管理工具->计算机管理。右键点击C盘选择压缩卷。输入15000MB，压缩出15G的空闲空间。
1.2.2 将Ubuntu安装U盘插入机箱，开机后按F2或DEL键进入BOOST页面，在启动项中选择U盘。保存设置并退出。
1.2.3 系统将重启并自动进入Ubuntu安装界面，根据提示安装系统。
注：可以省略创建SWAP盘进行Ubuntu系统安装。
1.2.4 Ubuntu系统安装完成后会丢失WINDOWS启动项，运行如下命令进行修复：sudo updata-grub
1.2.5 运行如下命令对系统进行更新：sudo apt-get update && sudo apt-get upgrade

2. VPN设置

2.1 Wine
2.1.1 运行如下命令安装Wine 1.7.35
$ sudo add-apt-repository ppa:ubuntu-wine/ppa
$ sudo apt-get update
$ sudo apt-get install -y wine1.7

2.1 FreeGate安装
2.1.1 向公司索取FreeGate应用程序。
2.1.2 复制fg758p.exe至wine下Program Files,如~/.wine/drive_c/Program\ Files/Free\ Gate/。
2.1.3 运行如下命令安装mfc42.dll：winetricks  mfc42
2.1.4 创建Free Gate快捷方式：
$ sudo apt-get install --no-install-recommends gnome-panel
$ gnome-desktop-item-edit ~/ --create-new
在目录中手动填入命令env WINEPREFIX="/home/username/.wine" wine "<fg758p.exe file path>"，fg758.exe路径如/home/username/.wine/drive_c/Program Files/Free Gate/fg758.exe。
确认完成。

2.2 Firefox设置
2.2.1 Firefox 设置->高级->网络->连接设置中，手动代理设置，输入127.0.0.1，端口8580。
2.2.2 如果仍然无法打开www.google.com或者www.youtube.com，可以安装firefox插件FoxyProxy。

3. Git安装
3.1 安装Git
$ sudo apt-get update
$ sudo apt-get install git
3.2 设置Git
$ git config --global user.name "Your name"
$ git config --global user.email "youremail@domain.com"
3.3 下载hello-world代码
创建projects文件夹，如/home/username/Porjects，在Projects文件夹下运行：
$ git clone https://github.com/yuanshuoit/hello-world.git

4. 配置LEMP环境
4.1 安装Nginx
4.1.1 运行 $ sudo apt-get update
4.1.2 安装Nginx $ sudo apt-get install nginx
4.1.3 启动Nginx服务 $ sudo service nginx start
4.1.4 查看Nginx状态 $ sudo service nginx status
4.1.5 测试Nginx 浏览器中打开http://127.0.0.1/ 或 http://localhost/
4.1.6 创建网站目录 $ sudo mkdir -p /srv/www/longqishi.com/
4.1.7 创建测试文件 $ sudo touch /srv/www/longqishi.com/index.html
4.1.8 打开并编辑index.html文件，写入
<html>
<body>

<h1>Hello World</h1>

<p>Hello World!</p>

</body>
</html>
4.1.9 打开并编辑/etc/nginx/sites-available/default，添加
# longqishi.com
server {
	listen 8080;
	listen [::]:8080;
	
	root /srv/www/longqishi.com;
	index index.html index.php;

	# Make site accessible from http://localhost:8080/
	server_name localhost:8080;
}
4.1.10 运行 $ sudo nginx -t 确认配置文件正确。
4.1.11 重启nginx $ sudo service nginx restart，打开http://localhost:8080/确认配置完成。


sudo apt-cache search php


4.2 安装PHP5 5.6
4.2.1 运行 
$ sudo apt-get update 
$ sudo add-apt-repository ppa:ondrej/php5-5.6
4.2.2 安装php5 运行 $ sudo apt-get install php5
4.2.3 安装php5-fpm $ sudo apt-get install php5-fpm
4.2.4 配置PHP 打开/etc/php5/fpm/php.ini，找到cig.fix_pathinfo=1，去掉注释并修改为cig.fix_pathinfo=0
4.2.5 重启php-fpm服务 $ sudo service php5-fpm restart
4.2.6 查看php-fpm服务状态 $ sudo service php5-fpm status
4.2.7 创建文件 /srv/www/longqishi.com/index.php 写入
<?php
phpinfo();
?>
4.2.8 配置nginx 打开并编辑/etc/nginx/sites-available/default，在server中添加：
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

		# With php5-cgi alone:
		#fastcgi_pass 127.0.0.1:9000;
		# With php5-fpm:
		fastcgi_pass unix:/var/run/php5-fpm.sock;
		fastcgi_index index.php;
		include fastcgi_params;
	}
4.2.9 重启nginx $ sudo service nginx restart
4.2.10 打开http://localhost:8080/index.php验证php安装完成

4.3 安装MySQL 5.6
4.3.1 安装MySQL 
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install mysql-server-5.6 mysql-client-5.6
4.3.2 确认MySQL安装完成 $ sudo service mysql status
4.3.3 安装phpMyAdmin $ sudo apt-get install phpmyadmin
4.3.4 创建文件夹 $ sudo mkdir /srv/www/phpmyadmin
4.3.5 创建phpMyAdmin链接 $ sudo ln -s /usr/share/phpmyadmin/ /srv/www/phpmyadmin/
4.3.6 配置Nginx，打开并编辑/etc/nginx/sites-available/default，添加 
# phpmyadmin
server {
	listen 8090;
	listen [::]:8090;
	
	root /srv/www/phpmyadmin;
	index index.php index.html;

	# Make site accessible from http://localhost:8090/
	server_name localhost:8090;

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

		# With php5-cgi alone:
		#fastcgi_pass 127.0.0.1:9000;
		# With php5-fpm:
		fastcgi_pass unix:/var/run/php5-fpm.sock;
		fastcgi_index index.php;
		include fastcgi_params;
	}
}
4.3.7 重启Nginx $ sudo service nginx restart
4.3.8 确认phpmyadmin安装完成，打开http://localhost:8090/phpmyadmin/
注意： 
	a. 如果显示警告，你的php sql library版本与mysql版本不一致，请安装php-mysqlnd $ sudo apt-get php-mysqlnd
	b. 如果显示警告controluser配置连接错误，可以忽略。也可以通过注释掉/etc/phpmyadmin/config.inc.php文件中代码来去掉。
	    /* Optional: User for advanced features */
		// $cfg['Servers'][$i]['controluser'] = $dbuser;
		// $cfg['Servers'][$i]['controlpass'] = $dbpass;


5 安装Eclipse

5.1 安装Eclipse 
5.1.1 安装eclipse $ sudo apt-get install eclipse

5.2 下载Eclipse PHP插件
5.2.1 从http://eclipse.org/pdt/下载，比如eclipse-php-mars-2-linux-gtk-x86_64.tar.gz。
5.2.2 将压缩包解压至~/目录下，$ sudo ~/eclipse/eclipse，安装成功。

5.3 安装xdebug
5.3.1 安装xdebug $ sudo apt-get install php5-xdebug
5.3.2 打开/etc/php5/fpm/php.ini，添加
[xdebug]
zend_extension=/usr/lib/php5/20131226/xdebug.so
xdebug.remote_autostart=on
xdebug.remote_connect_back=on
xdebug.remote_enable=on
xdebug.remote_handler=dbgp
xdebug.remote_host=localhost
xdebug.remote_port=9000
xdebug.idekey=ECLIPSE_DBGP
注意：zend_extension目录根据xdebug版本不同会有变化，添加前确认路径正确。
5.3.3 重启fpm服务 $ sudo service php5-fpm restart
5.3.4 重启nginx  $ sudo service nginx restart
5.3.5 打开http://localhost:8080，查看xdebug配置生效。
注意以下几点：
1. xdebug.remote_enable值为on
2. xdebug.remote_handler值为dbgp
3. xdebug.remote_port值为localhost


5.4 配置eclipse
5.4.1 启动eclipse $ sudo ~/eclipse/eclipse
5.4.2 设置PHP Executable 打开Windows->Preferences->PHP->PHP Executables, 选择Add...，点击Executable Path后Browse...，选择/usr/bin/php5，点击确认(Finish)。
5.4.3 双击刚刚添加的PHP，切换到Debugger界面，选择XDebug。
5.4.4 设置PHP Servers，打开Windows->Preferences->PHP->Servers，双击Default PHP Web Server，将Base URL改为http://localhost:8080。将Document Root设置为/srv/www/longqishi.com。
切换到Debugger界面，选择XDebug。
5.4.5 在Eclipse主界面中，创建新的PHP Project，起名为HelloWorld。添加新PHP文件，取名为index.php，在文件中编辑
<?php
$param = isset($_GET['myParam']) ? $_GET['myParam'] : null;

if (!empty($param)) {
var_dump($param); 
}
echo phpinfo();
双击添加断点。
5.4.6 右键选择Debug->Debug Configuration...，在hello world中配置Default PHP Web Server，设置Debugger为XDebug。
5.4.7 右键选择Debug->PHP Web Applicaiton，如果断点被获取，并且跳过页面正常显示，则配置成功。

6 安装Phalcon
6.1 安装编译程序 $ sudo apt-get install php5-dev php5-mysql gcc libpcre3-dev
6.2 获取程序包，进入～/Projects文件夹 $ git clone --depth=1 git://github.com/phalcon/cphalcon.git
6.3 编译安装 Phalcon
$ cd cphalcon/build
$ sudo ./install
6.4 创建文件30-phalcon.ini $sudo touch /etc/php5/fpm/conf.d/30-phalcon.ini
在文件中添加如下内容 extension=phalcon.so
6.5 重启fpm服务 $ sudo service php5-fpm restart
6.6 重启nginx  $ sudo service nginx restart
6.7 打开http://localhost:8080，查看Phalcon已经安装成功。

7.安装composer
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composers



